import static org.junit.Assert.assertEquals;
import org.junit.Test;
import java.util.Map;

/**
 * @author Clint Hall
 * @version 1
 */
public class BlockTypeTests {
    /**
     * Test a good case.
     */
    @Test
    public void scriptSpecTest1() {
        scriptSpecTestAbstraction("turnRight:", "Motion");
    }
    /**
     * Test a case with a non-existent opcode.
     */
    @Test
    public void scriptSpectTest2() {
        scriptSpecTestAbstraction("foo", null);
    }
    /**
     * Used to test the commandsByType map generated by ScriptSpecs.
     * @param opcode The opcode to retrive from the map.
     * @param expectedCategory The expected category of opcode.
     */
    private void scriptSpecTestAbstraction(String opcode, String expectedCategory) {
        Map<String, Integer> commandsByType = ScriptSpecs.getCommandsByType();
        String[] categories = ScriptSpecs.getCategories();
        Integer actualCategoryInteger = commandsByType.get(opcode);
        String actualCategory = null;
        if(actualCategoryInteger != null) {
            actualCategory = categories[actualCategoryInteger];
        }
//        System.out.println("expected : " + expectedCategory + ", actual: " + actualCategory);
        assertEquals(expectedCategory, actualCategory);
    }
    /**
     * Test getBlocksByCategoryForSprite with an easy case
     */
    @Test
    public void testGetBlocksByCategoryForSprite1() {
        Sprites sprites = new Sprites(Utils.getResourceJSONObject("SimpleBlockTypes.json"));
        String[] spriteNames = sprites.getSpriteNames();
        String[] categories = ScriptSpecs.getCategories();
        int[][] blocksByCategoryPerSprite = new int[spriteNames.length][];
        for (int i = 0; i < spriteNames.length; i++) {
            String spriteName = spriteNames[i];
            blocksByCategoryPerSprite[i] = sprites.getBlocksByCategoryForSprite(spriteName);
        }
        int[][] expected = {
            {0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };
        assertEquals(expected, blocksByCategoryPerSprite);

    }
}
