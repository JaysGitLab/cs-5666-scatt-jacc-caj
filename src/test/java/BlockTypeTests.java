import static org.junit.Assert.assertEquals;
import org.junit.Test;
import java.util.Map;
import java.util.Arrays;

/**
 * @author Clint Hall
 * @version 1
 */
public class BlockTypeTests {
    /**
     * Test a good case.
     */
    @Test
    public void scriptSpecTest1() {
        scriptSpecTestAbstraction("turnRight:", "Motion");
    }
    /**
     * Test a case with a non-existent opcode.
     */
    @Test
    public void scriptSpectTest2() {
        scriptSpecTestAbstraction("foo", null);
    }
    /**
     * Used to test the commandsByType map generated by ScriptSpecs.
     * @param opcode The opcode to retrive from the map.
     * @param expectedCategory The expected category of opcode.
     */
    private void scriptSpecTestAbstraction(String opcode, String expectedCategory) {
        Map<String, Integer> commandsByType = ScriptSpecs.getCommandsByType();
        String[] categories = ScriptSpecs.getCategories();
        Integer actualCategoryInteger = commandsByType.get(opcode);
        String actualCategory = null;
        if (actualCategoryInteger != null) {
            actualCategory = categories[actualCategoryInteger];
        }
//        System.out.println("expected : " + expectedCategory + ", actual: " + actualCategory);
        assertEquals(expectedCategory, actualCategory);
    }
    /**
     * Test getBlocksByCategoryForSprite with an easy case.
     */
    @Test
    public void testGetBlocksByCategoryForSprite1() {
        testGetBlocksByCategoryForSprite(
            "SimpleBlockTypes.json",
            new int[][] {
                {0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
            }
        );
    }
    /**
     * Test getBlocksByCategoryForSprite with nested blocks.
     */
    @Test
    public void testGetBlocksByCategoryForSprite2() {
        // The following would be prettier with trailing comments.
        // But checkstyle hates trailing comments.
        int[][] expected = {
            {
            // "undefined",
                0,    
            // "Motion",
                6,    
            // "Looks",
                0,    
            // "Sound",
                0,    
            // "Pen",
                0,    
            // "Events",
                0,    
            // "Control",
                3,    
            // "Sensing",
                0,    
            // "Operators",
                0,    
            // "Data",
                0,    
            // "More Blocks",
                0,    
            // "Parameter",
                0,    
            // "List",
                0,    
            // "Extension"
                0,    
            }
        };

        testGetBlocksByCategoryForSprite("NestedBlocks.json", expected);
    }
    /**
     * Method to make testing Blocks by category easier.
     * @param jsonFileName The name of the json file to use in the test.
     *                     The file should be located in src/test/resources/ScratchJsonFiles/
     * @param expected the expected counts
     */
    public void testGetBlocksByCategoryForSprite(String jsonFileName, int[][] expected) {
        Sprites sprites = new Sprites(Utils.getResourceJSONObject(jsonFileName));
        String[] spriteNames = sprites.getSpriteNames();
        String[] categories = ScriptSpecs.getCategories();
        int[][] blocksByCategoryPerSprite = new int[spriteNames.length][];
        for (int i = 0; i < spriteNames.length; i++) {
            String spriteName = spriteNames[i];
            Script[] scripts = sprites.getScriptsForSprite(spriteName);
            blocksByCategoryPerSprite[i] = Script.sumBlocksByCategory(scripts);
            //I don't like this loop here.  I want Scripts.sumBlocksByCategory(sprites);
            //or maybe that method should total all in all the sprites.
        }
        System.out.println("expeced: " + Arrays.toString(expected[0]));
        System.out.println("actual:  " + Arrays.toString(blocksByCategoryPerSprite[0]));
        assertEquals(expected, blocksByCategoryPerSprite);
    }
}
