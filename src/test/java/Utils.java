import java.net.URL;
import org.json.JSONObject;
import java.util.Arrays;
import java.nio.file.Files;
import java.util.stream.Collectors;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.io.IOException;

/**
 * @version 1.0
 * @author B. Clint Hall
 */
public class Utils {
    /**
     * Get a string representing a path to a project test resource.
     * Project test resources should be put in src/test/resources.
     * @param resName The name of the resource file
     * @return String representation of path to resource
     */
    static String getTestResourcePath(String resName) {
        // Thank you James Lorenzen
        // http://jlorenzen.blogspot.co.uk/2007/06/proper-way-to-access-file-resources-in.html
        URL url = new Utils().getClass().getResource("/" + resName);
        String filePath = url.getFile();
        return filePath;
    }

    /**
     * Given a file path return a String of file contents.
     * @param pathStr Path to the file
     * @return contents of file
     * @throws IOException If there is a problem reading the file.
     */
    public static String getFileContents(String pathStr) throws IOException {
        Path path = Paths.get(pathStr);
        return Files.lines(path).collect(Collectors.joining("\n"));
    }
    /**
     * Get the contents of a resource file as a string.
     * @param resourceName The name of the resource file.
     * @return The contents of the file as a String.
     */
    static String getResourceContent(String resourceName) {
        String filePath = getTestResourcePath(resourceName);
        String str = Sb2.getFileContents(filePath);
        return str;
    }

    /**
     * Get the JSONObject for the Wizard project.
     * @return the JSONObject for the Wizard project.
     */
    static JSONObject getWizardJSONObject() {
        return Sb2.createJSONObject(getResourceContent("project.json"));
    }
    /**
     * Test whether arrays have same contents regardless of order.
     * @param a One array.
     * @param b another array.
     * @return whether a and b have same contents
     */
    static boolean sameContents(Comparable[] a, Comparable[] b) {
        Arrays.sort(a);
        Arrays.sort(b);
        return Arrays.equals(a, b);
    }

    /**
     * Given two strings, find the difference, print from 10 characters before
     * difference to 5 lines after difference.
     * @param actual the string actually generated by our code.
     * @param expected the string we were hoping our code would generate.
     */
    static void diffStrings(String actual, String expected) {
        boolean divergenceFound = false;
        int i = 0;
        while (!divergenceFound && i < Math.min(expected.length(), actual.length())) {
            if (expected.charAt(i) != actual.charAt(i)) {
                divergenceFound = true;
            }
            i++;
        }
        i -= 10;
        i = i < 0 ? 0 : i;
        int ia = i;
        int ie = i;
        for (int j = 0; j < 5; j++) {
            System.out.print("\n\nactual:   ");
            char actualChar = actual.charAt(ia);
            while (actualChar != '\n') {
                System.out.print(actualChar);
                ia++;
                if (ia >= actual.length()) {
                    return;
                }
                actualChar = actual.charAt(ia);
            }
            System.out.print("\nexpected: ");
            char expectedChar = expected.charAt(ie);
            while (expectedChar != '\n') {
                System.out.print(expectedChar);
                ie++;
                if (ie >= expected.length()) {
                    return;
                }
                expectedChar = expected.charAt(ie);
            }
            ia++;
            if (ia >= actual.length()) {
                return;
            }
            actualChar = actual.charAt(ia);
            ie++;
            if (ie >= expected.length()) {
                return;
            }
            expectedChar = expected.charAt(ie);
        }
    }
    /**
     * A method to write data to a file.  Useful for manually checking
     * the output of tests.
     * @param pathStr Path relative to the project root.
     * @param text Text to write to file.
     */
    public void writeToFile(String pathStr, String text) {
        byte[] bytes = text.getBytes();
        try {
            Path path = Paths.get(pathStr);
            Files.write(path, bytes);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
