import java.util.Map;
import java.util.HashMap;

/**
 * @author Clint Hall
 * @author James Ward
 * @version 1
 */
public class ScriptSpecs {
    private static final String[][] COMMANDS = {
        {"forward:", "Motion"},
        {"turnRight:", "Motion"},
        {"turnLeft:", "Motion"},
        {"heading:", "Motion"},
        {"pointTowards:", "Motion"},
        {"gotoX:y:", "Motion"},
        {"gotoSpriteOrMouse:", "Motion"},
        {"glideSecs:toX:y:elapsed:from:", "Motion"},
        {"changeXposBy:", "Motion"},
        {"xpos:", "Motion"},
        {"changeYposBy:", "Motion"},
        {"ypos:", "Motion"},
        {"bounceOffEdge", "Motion"},
        {"setRotationStyle", "Motion"},
        {"xpos", "Motion"},
        {"ypos", "Motion"},
        {"heading", "Motion"},
        {"say:duration:elapsed:from:", "Looks"},
        {"say:", "Looks"},
        {"think:duration:elapsed:from:", "Looks"},
        {"think:", "Looks"},
        {"show", "Looks"},
        {"hide", "Looks"},
        {"lookLike:", "Looks"},
        {"nextCostume", "Looks"},
        {"startScene", "Looks"},
        {"changeGraphicEffect:by:", "Looks"},
        {"setGraphicEffect:to:", "Looks"},
        {"filterReset", "Looks"},
        {"changeSizeBy:", "Looks"},
        {"setSizeTo:", "Looks"},
        {"comeToFront", "Looks"},
        {"goBackByLayers:", "Looks"},
        {"costumeIndex", "Looks"},
        {"sceneName", "Looks"},
        {"scale", "Looks"},
        {"playSound:", "Sound"},
        {"doPlaySoundAndWait", "Sound"},
        {"stopAllSounds", "Sound"},
        {"playDrum", "Sound"},
        {"rest:elapsed:from:", "Sound"},
        {"noteOn:duration:elapsed:from:", "Sound"},
        {"instrument:", "Sound"},
        {"changeVolumeBy:", "Sound"},
        {"setVolumeTo:", "Sound"},
        {"volume", "Sound"},
        {"changeTempoBy:", "Sound"},
        {"setTempoTo:", "Sound"},
        {"tempo", "Sound"},
        {"clearPenTrails", "Pen"},
        {"stampCostume", "Pen"},
        {"putPenDown", "Pen"},
        {"putPenUp", "Pen"},
        {"penColor:", "Pen"},
        {"changePenHueBy:", "Pen"},
        {"setPenHueTo:", "Pen"},
        {"changePenShadeBy:", "Pen"},
        {"setPenShadeTo:", "Pen"},
        {"changePenSizeBy:", "Pen"},
        {"penSize:", "Pen"},
        {"whenGreenFlag", "Events"},
        {"whenKeyPressed", "Events"},
        {"whenClicked", "Events"},
        {"whenSceneStarts", "Events"},
        {"whenSensorGreaterThan", "Events"},
        {"whenIReceive", "Events"},
        {"broadcast:", "Events"},
        {"doBroadcastAndWait", "Events"},
        {"wait:elapsed:from:", "Control"},
        {"doRepeat", "Control"},
        {"doForever", "Control"},
        {"doIf", "Control"},
        {"doIfElse", "Control"},
        {"doWaitUntil", "Control"},
        {"doUntil", "Control"},
        {"stopScripts", "Control"},
        {"whenCloned", "Control"},
        {"createCloneOf", "Control"},
        {"deleteClone", "Control"},
        {"touching:", "Sensing"},
        {"touchingColor:", "Sensing"},
        {"color:sees:", "Sensing"},
        {"distanceTo:", "Sensing"},
        {"doAsk", "Sensing"},
        {"answer", "Sensing"},
        {"keyPressed:", "Sensing"},
        {"mousePressed", "Sensing"},
        {"mouseX", "Sensing"},
        {"mouseY", "Sensing"},
        {"soundLevel", "Sensing"},
        {"senseVideoMotion", "Sensing"},
        {"setVideoState", "Sensing"},
        {"setVideoTransparency", "Sensing"},
        {"timer", "Sensing"},
        {"timerReset", "Sensing"},
        {"getAttribute:of:", "Sensing"},
        {"timeAndDate", "Sensing"},
        {"timestamp", "Sensing"},
        {"getUserName", "Sensing"},
        {"+", "Operators"},
        {"-", "Operators"},
        {"*", "Operators"},
        {"/", "Operators"},
        {"randomFrom:to:", "Operators"},
        {"<", "Operators"},
        {"=", "Operators"},
        {">", "Operators"},
        {"&", "Operators"},
        {"|", "Operators"},
        {"not", "Operators"},
        {"concatenate:with:", "Operators"},
        {"letter:of:", "Operators"},
        {"stringLength:", "Operators"},
        {"%", "Operators"},
        {"rounded", "Operators"},
        {"computeFunction:of:", "Operators"},
        {"SET_VAR", "Data"},
        {"CHANGE_VAR", "Data"},
        {"showVariable:", "Data"},
        {"hideVariable:", "Data"},
        {"append:toList:", "List"},
        {"deleteLine:ofList:", "List"},
        {"insert:at:ofList:", "List"},
        {"setLine:ofList:to:", "List"},
        {"getLine:ofList:", "List"},
        {"lineCountOfList:", "List"},
        {"list:contains:", "List"},
        {"showList:", "List"},
        {"hideList:", "List"},
    };
    private static Map<String, String> commandsByType = null;
    /**
     * Returns a map in which the keys are the command opcodes that can appear
     * in Scratch scripts and the values are the category to which the command belongs.
     * @return the above specified map.
     */
    public static Map<String, String> getCommandsByType() {
        if (commandsByType == null) {
            commandsByType = new HashMap<>();
            for (int i = 0; i < COMMANDS.length; i++) {
                String[] command = COMMANDS[i];
                commandsByType.put(command[0], command[1]);
            }
        }
        return commandsByType;
    }
}
